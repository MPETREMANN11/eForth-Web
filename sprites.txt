\ *********************************************************************
\ SPRITES for ESP32forth & uEforth
\    Filename:      sprites.txt
\    Date:          15 jan 2023
\    Updated:       15 jan 2023
\    File Version:  1.1
\    MCU:           ESP32-WROOM-32 / uEforth Windows
\    Forth:         ESP32forth all versions 7...++ / uEforth 
\    Copyright:     Marc PETREMANN
\    Author:        Marc PETREMANN
\    GNU General Public License
\ *********************************************************************


\ tool for displaying characters
: tableChars ( -- )
    base @ >r  hex
    128 32 do
       16 0 do
            j i + dup . space emit space space
       loop
       cr
    16 +loop
    256 160 do
       16 0 do
            j i + dup . space emit space space
       loop
       cr
    16 +loop
    cr
    r> base !
  ;
\ tableChars    \ display characters table

\ define cARRAY as bi dimensionnal array
structures 
struct cARRAY 
    i8  field >width 
    i8  field >height 
    i8  field >content 
         
create myVscreen    \ define a screen 8x32 bytes 
    32 c,           \ compile width 
    08 c,           \ compile height 
    myVscreen >width  c@ 
    myVscreen >height c@ * allot 

\ SPRITES definition word
: sprite: ( width height -- ) 
    create 
        swap c, c,  \ compile width and height 
    does> 
  ; 
2 1 sprite: blackChars 
    $db c, $db c,  
2 1 sprite: greyChars 
    $b2 c, $b2 c,  
blackChars >content 2 type   \ display content of sprite blackChars 

\ define 5 x 7 sprites:

2 7 sprite: dot
    $20 c,  $20 c,
    $20 c,  $20 c,
    $20 c,  $20 c,
    $20 c,  $20 c,
    $20 c,  $20 c,
    $20 c,  $20 c,
    $db c,  $db c,

5 7 sprite: char0
    $20 c,  $db c,  $db c,  $db c,  $20 c, 
    $db c,  $20 c,  $20 c,  $20 c,  $db c,
    $db c,  $20 c,  $20 c,  $20 c,  $db c,
    $db c,  $20 c,  $20 c,  $20 c,  $db c,
    $db c,  $20 c,  $20 c,  $20 c,  $db c,
    $db c,  $20 c,  $20 c,  $20 c,  $db c,
    $20 c,  $db c,  $db c,  $db c,  $20 c, 

3 7 sprite: char1
    $20 c,  $db c,  $20 c,
    $db c,  $db c,  $20 c,
    $20 c,  $db c,  $20 c,
    $20 c,  $db c,  $20 c,
    $20 c,  $db c,  $20 c,
    $20 c,  $db c,  $20 c,
    $db c,  $db c,  $db c,

5 7 sprite: char2
    $20 c,  $db c,  $db c,  $db c,  $20 c, 
    $db c,  $20 c,  $20 c,  $20 c,  $db c,
    $20 c,  $20 c,  $20 c,  $20 c,  $db c,
    $20 c,  $20 c,  $20 c,  $db c,  $20 c,  
    $20 c,  $20 c,  $db c,  $20 c,  $20 c,  
    $20 c,  $db c,  $20 c,  $20 c,  $20 c,  
    $db c,  $db c,  $db c,  $db c,  $db c,

5 7 sprite: char3
    $20 c,  $db c,  $db c,  $db c,  $20 c, 
    $db c,  $20 c,  $20 c,  $20 c,  $db c,
    $20 c,  $20 c,  $20 c,  $20 c,  $db c,
    $20 c,  $db c,  $db c,  $db c,  $20 c, 
    $20 c,  $20 c,  $20 c,  $20 c,  $db c,
    $db c,  $20 c,  $20 c,  $20 c,  $db c,
    $20 c,  $db c,  $db c,  $db c,  $20 c,

5 7 sprite: char4
    $20 c,  $db c,  $20 c,  $20 c,  $20 c, 
    $20 c,  $db c,  $20 c,  $20 c,  $20 c, 
    $20 c,  $db c,  $20 c,  $20 c,  $20 c, 
    $db c,  $20 c,  $20 c,  $db c,  $20 c, 
    $db c,  $db c,  $db c,  $db c,  $db c,
    $20 c,  $20 c,  $20 c,  $db c,  $20 c, 
    $20 c,  $20 c,  $20 c,  $db c,  $20 c, 

5 7 sprite: char5
    $db c,  $db c,  $db c,  $db c,  $db c,
    $db c,  $20 c,  $20 c,  $20 c,  $20 c, 
    $db c,  $20 c,  $20 c,  $20 c,  $20 c, 
    $db c,  $db c,  $db c,  $db c,  $20 c,
    $20 c,  $20 c,  $20 c,  $20 c,  $db c, 
    $db c,  $20 c,  $20 c,  $20 c,  $db c, 
    $20 c,  $db c,  $db c,  $db c,  $20 c,

5 7 sprite: char6
    $20 c,  $db c,  $db c,  $db c,  $20 c,
    $db c,  $20 c,  $20 c,  $20 c,  $db c, 
    $db c,  $20 c,  $20 c,  $20 c,  $20 c, 
    $db c,  $db c,  $db c,  $db c,  $20 c,
    $db c,  $20 c,  $20 c,  $20 c,  $db c, 
    $db c,  $20 c,  $20 c,  $20 c,  $db c, 
    $20 c,  $db c,  $db c,  $db c,  $20 c,

3 7 sprite: char7
    $db c,  $db c,  $db c,
    $20 c,  $20 c,  $db c,
    $20 c,  $20 c,  $db c,
    $20 c,  $20 c,  $db c,
    $20 c,  $20 c,  $db c,
    $20 c,  $20 c,  $db c,
    $20 c,  $20 c,  $db c,

5 7 sprite: char8
    $20 c,  $db c,  $db c,  $db c,  $20 c,
    $db c,  $20 c,  $20 c,  $20 c,  $db c, 
    $db c,  $20 c,  $20 c,  $20 c,  $db c, 
    $20 c,  $db c,  $db c,  $db c,  $20 c,
    $db c,  $20 c,  $20 c,  $20 c,  $db c, 
    $db c,  $20 c,  $20 c,  $20 c,  $db c, 
    $20 c,  $db c,  $db c,  $db c,  $20 c,

5 7 sprite: char9
    $20 c,  $db c,  $db c,  $db c,  $20 c,
    $db c,  $20 c,  $20 c,  $20 c,  $db c, 
    $db c,  $20 c,  $20 c,  $20 c,  $db c, 
    $20 c,  $db c,  $db c,  $db c,  $db c,
    $20 c,  $20 c,  $20 c,  $20 c,  $db c, 
    $db c,  $20 c,  $20 c,  $20 c,  $db c, 
    $20 c,  $db c,  $db c,  $db c,  $20 c,



: .sprite { xpos ypos sprAddr -- }
    sprAddr >height c@ 0 do
        xpos ypos at-xy
        sprAddr >width c@ i *   \ calculate offset in sprite datas
        sprAddr >content +      \ calculate real address for line n in sprite datas
        sprAddr >width c@ type  \ display line
        1 +to ypos              \ increment y position
    loop
  ;

0 constant blackColor
1 constant redColor
4 constant blueColor
blueColor fg
10 02 char3 .sprite
16 02 dot   .sprite
19 02 char1 .sprite
23 02 char2 .sprite
29 02 char4 .sprite
35 02 char5 .sprite
41 02 char6 .sprite

47 02 char7 .sprite

51 02 char8 .sprite

57 02 char9 .sprite

63 02 char0 .sprite


7 fg




